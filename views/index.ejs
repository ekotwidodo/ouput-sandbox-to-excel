<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>Output Sandbox | <%= pageTitle %></title>

    <!-- Metro 4 -->
    <link rel="stylesheet" href="https://cdn.metroui.org.ua/v4.3.2/css/metro-all.min.css">
  </head>
  <body>

    <div class="container">
        <!-- content here -->
        <h1 class="text-center mb-5"><%= pageTitle %></h1>

        <form id="form-export">
            <div class="form-group">
                <label>Paste the output</label>
                <input type="text" id="jsonString" name="jsonString" oninput="handleChange(event, this.value)" />
            </div>
            <div class="form-group">
                <button class="image-button alert" type="submit">
                    <span class="mif-download icon"></span>
                    <span class="caption">Export to Excel</span>
                </button>
            </div>
            <div class="form-group jsonFormat">
                <h6>JSON Format</h6>
                <div id="jsonFormat"></div>
            </div>
            <input type="hidden" id="jsonData" name="jsonData"/>
        </form>
        <div class="form-group">
            <h6>Table Format</h6>
            <div id="showTable"></div>
        </div>
    </div>

    <!-- Metro 4 -->
    <script src="https://cdn.metroui.org.ua/v4.3.2/js/metro.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/json-formatter-js@2.3.4/dist/json-formatter.umd.min.js"></script>
    <script>

        function handleChange (event, directValue) {

            // Get the value from jsonString input
            let jsonString= event.target.value

            // Parse jsonString into JSON formatted
            let jsonFormat = JSON.parse(jsonString)

            // Show the JSON formatted in jsonFormat input
            let jsonViewer = document.getElementById('jsonFormat')

            const options = {
                hoverPreviewEnabled: false,
                hoverPreviewArrayCount: 100,
                hoverPreviewFieldCount: 5,
                animateOpen: true,
                animateClose: true,
                theme: null, // or 'dark'
                useToJSON: true, // use the toJSON method to render an object as a string as available
                maxArrayItems: 100,
                exposePath: false
            }

            let formatter = new JSONFormatter(jsonFormat, 1, options)
            jsonViewer.innerHTML = ""
            jsonViewer.appendChild(formatter.render())

            // Show the JSON selected data into table
            let data = jsonFormat.data.results.msg[1].data
            setJSONData(data)
            showTable(formatJSON(data))
        }

        function setJSONData(data) {
            let jsonData = document.getElementById("jsonData")
            jsonData.value = data
        }

        function showTable(data) {

            // Extract value for html header
            let col = []
            for (let i = 0; i < data.length; i++) {
                for (let key in data[i]) {
                    if (col.indexOf(key) === -1) {
                        col.push(key)
                    }
                }
            }

            // Create dynamic table
            let table = document.createElement("table")
            table.className = "table striped table-border mt-4"

            // Create html table header row using the extracted headers above
            let tr = table.insertRow(-1)

            for (let j = 0; j < col.length; j++) {
                let th = document.createElement("th")
                th.innerHTML = col[j]
                tr.appendChild(th)
            }

            // Add JSON data to the tables as rows
            for (let k = 0; k < data.length; k++) {
                tr = table.insertRow(-1)
                for (let l = 0; l < col.length; l++) {
                    let tabCell = tr.insertCell(-1)
                    tabCell.innerHTML = data[k][col[l]]
                }
            }

            // Finally add the newlu created table 
            let divContainer = document.getElementById("showTable")
            divContainer.innerHTML = ""
            divContainer.appendChild(table)
        }

        function formatJSON(string) {
            
            let formattedJSON = []
            // Get headers
            let headers = string.split('\n')[0].split('\t')
            // Get rows
            for (let i = 1; i < string.split('\n').length-1; i++) {
                let rows = {}
                for (let j = 0; j < string.split('\n')[i].split('\t').length; j++) {
                    let items = string.split('\n')[i].split('\t')
                    rows[headers[j]] = items[j]
                }

                formattedJSON.push(rows)
            }

            return formattedJSON
        }

        async function postData (url, data) {
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(data)
            })

            const resData = await response.json()
            return resData
        }

        let formExport = document.getElementById("form-export")
        formExport.addEventListener("submit", function(event) {
            event.preventDefault()
            let jsonData = document.getElementById("jsonData").value
            let data = formatJSON(jsonData)
            let timestamp = new Date().getTime()
            
            postData('/export', {data: data, timestamp: timestamp})
                .then(result => {
                    if (result.status) {
                        window.location = `./download/output-${timestamp}.xlsx`
                    }
                })
                .catch(err => console.log(err))
        })

    </script>
  </body>
</html>